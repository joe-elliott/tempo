// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: pkg/tempopb/tempo.proto

package tempopb

import (
	v1 "github.com/grafana/tempo/pkg/tempopb/trace/v1"
	_ "github.com/planetscale/vtprotobuf/vtproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Read
type TraceByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TraceID    []byte `protobuf:"bytes,1,opt,name=traceID,proto3" json:"traceID,omitempty"`
	BlockStart string `protobuf:"bytes,2,opt,name=blockStart,proto3" json:"blockStart,omitempty"`
	BlockEnd   string `protobuf:"bytes,3,opt,name=blockEnd,proto3" json:"blockEnd,omitempty"`
	QueryMode  string `protobuf:"bytes,5,opt,name=queryMode,proto3" json:"queryMode,omitempty"`
}

func (x *TraceByIDRequest) Reset() {
	*x = TraceByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_tempopb_tempo_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceByIDRequest) ProtoMessage() {}

func (x *TraceByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_tempopb_tempo_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceByIDRequest.ProtoReflect.Descriptor instead.
func (*TraceByIDRequest) Descriptor() ([]byte, []int) {
	return file_pkg_tempopb_tempo_proto_rawDescGZIP(), []int{0}
}

func (x *TraceByIDRequest) GetTraceID() []byte {
	if x != nil {
		return x.TraceID
	}
	return nil
}

func (x *TraceByIDRequest) GetBlockStart() string {
	if x != nil {
		return x.BlockStart
	}
	return ""
}

func (x *TraceByIDRequest) GetBlockEnd() string {
	if x != nil {
		return x.BlockEnd
	}
	return ""
}

func (x *TraceByIDRequest) GetQueryMode() string {
	if x != nil {
		return x.QueryMode
	}
	return ""
}

type TraceByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Trace   *Trace            `protobuf:"bytes,1,opt,name=trace,proto3" json:"trace,omitempty"`
	Metrics *TraceByIDMetrics `protobuf:"bytes,2,opt,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *TraceByIDResponse) Reset() {
	*x = TraceByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_tempopb_tempo_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceByIDResponse) ProtoMessage() {}

func (x *TraceByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_tempopb_tempo_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceByIDResponse.ProtoReflect.Descriptor instead.
func (*TraceByIDResponse) Descriptor() ([]byte, []int) {
	return file_pkg_tempopb_tempo_proto_rawDescGZIP(), []int{1}
}

func (x *TraceByIDResponse) GetTrace() *Trace {
	if x != nil {
		return x.Trace
	}
	return nil
}

func (x *TraceByIDResponse) GetMetrics() *TraceByIDMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type TraceByIDMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailedBlocks uint32 `protobuf:"varint,1,opt,name=failedBlocks,proto3" json:"failedBlocks,omitempty"`
}

func (x *TraceByIDMetrics) Reset() {
	*x = TraceByIDMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_tempopb_tempo_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceByIDMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceByIDMetrics) ProtoMessage() {}

func (x *TraceByIDMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_tempopb_tempo_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceByIDMetrics.ProtoReflect.Descriptor instead.
func (*TraceByIDMetrics) Descriptor() ([]byte, []int) {
	return file_pkg_tempopb_tempo_proto_rawDescGZIP(), []int{2}
}

func (x *TraceByIDMetrics) GetFailedBlocks() uint32 {
	if x != nil {
		return x.FailedBlocks
	}
	return 0
}

// SearchRequest takes no block parameters and implies a "recent traces" search
type SearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// case insensitive partial match
	Tags          map[string]string `protobuf:"bytes,1,rep,name=Tags,proto3" json:"Tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MinDurationMs uint32            `protobuf:"varint,2,opt,name=MinDurationMs,proto3" json:"MinDurationMs,omitempty"`
	MaxDurationMs uint32            `protobuf:"varint,3,opt,name=MaxDurationMs,proto3" json:"MaxDurationMs,omitempty"`
	Limit         uint32            `protobuf:"varint,4,opt,name=Limit,proto3" json:"Limit,omitempty"`
	Start         uint32            `protobuf:"varint,5,opt,name=start,proto3" json:"start,omitempty"`
	End           uint32            `protobuf:"varint,6,opt,name=end,proto3" json:"end,omitempty"`
	// TraceQL query
	Query string `protobuf:"bytes,8,opt,name=Query,proto3" json:"Query,omitempty"`
}

func (x *SearchRequest) Reset() {
	*x = SearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_tempopb_tempo_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequest) ProtoMessage() {}

func (x *SearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_tempopb_tempo_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequest.ProtoReflect.Descriptor instead.
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return file_pkg_tempopb_tempo_proto_rawDescGZIP(), []int{3}
}

func (x *SearchRequest) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *SearchRequest) GetMinDurationMs() uint32 {
	if x != nil {
		return x.MinDurationMs
	}
	return 0
}

func (x *SearchRequest) GetMaxDurationMs() uint32 {
	if x != nil {
		return x.MaxDurationMs
	}
	return 0
}

func (x *SearchRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *SearchRequest) GetStart() uint32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *SearchRequest) GetEnd() uint32 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *SearchRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

// SearchBlockRequest takes SearchRequest parameters as well as all information necessary
// to search a block in the backend.
type SearchBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SearchReq     *SearchRequest `protobuf:"bytes,1,opt,name=searchReq,proto3" json:"searchReq,omitempty"`
	BlockID       string         `protobuf:"bytes,2,opt,name=blockID,proto3" json:"blockID,omitempty"`
	StartPage     uint32         `protobuf:"varint,3,opt,name=startPage,proto3" json:"startPage,omitempty"`
	PagesToSearch uint32         `protobuf:"varint,4,opt,name=pagesToSearch,proto3" json:"pagesToSearch,omitempty"`
	Encoding      string         `protobuf:"bytes,5,opt,name=encoding,proto3" json:"encoding,omitempty"`
	IndexPageSize uint32         `protobuf:"varint,6,opt,name=indexPageSize,proto3" json:"indexPageSize,omitempty"`
	TotalRecords  uint32         `protobuf:"varint,7,opt,name=totalRecords,proto3" json:"totalRecords,omitempty"`
	DataEncoding  string         `protobuf:"bytes,8,opt,name=dataEncoding,proto3" json:"dataEncoding,omitempty"`
	Version       string         `protobuf:"bytes,9,opt,name=version,proto3" json:"version,omitempty"`
	Size          uint64         `protobuf:"varint,10,opt,name=size,proto3" json:"size,omitempty"`             // total size of data file
	FooterSize    uint32         `protobuf:"varint,11,opt,name=footerSize,proto3" json:"footerSize,omitempty"` // size of file footer (parquet)
}

func (x *SearchBlockRequest) Reset() {
	*x = SearchBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_tempopb_tempo_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchBlockRequest) ProtoMessage() {}

func (x *SearchBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_tempopb_tempo_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchBlockRequest.ProtoReflect.Descriptor instead.
func (*SearchBlockRequest) Descriptor() ([]byte, []int) {
	return file_pkg_tempopb_tempo_proto_rawDescGZIP(), []int{4}
}

func (x *SearchBlockRequest) GetSearchReq() *SearchRequest {
	if x != nil {
		return x.SearchReq
	}
	return nil
}

func (x *SearchBlockRequest) GetBlockID() string {
	if x != nil {
		return x.BlockID
	}
	return ""
}

func (x *SearchBlockRequest) GetStartPage() uint32 {
	if x != nil {
		return x.StartPage
	}
	return 0
}

func (x *SearchBlockRequest) GetPagesToSearch() uint32 {
	if x != nil {
		return x.PagesToSearch
	}
	return 0
}

func (x *SearchBlockRequest) GetEncoding() string {
	if x != nil {
		return x.Encoding
	}
	return ""
}

func (x *SearchBlockRequest) GetIndexPageSize() uint32 {
	if x != nil {
		return x.IndexPageSize
	}
	return 0
}

func (x *SearchBlockRequest) GetTotalRecords() uint32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

func (x *SearchBlockRequest) GetDataEncoding() string {
	if x != nil {
		return x.DataEncoding
	}
	return ""
}

func (x *SearchBlockRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *SearchBlockRequest) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SearchBlockRequest) GetFooterSize() uint32 {
	if x != nil {
		return x.FooterSize
	}
	return 0
}

type SearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Traces  []*TraceSearchMetadata `protobuf:"bytes,1,rep,name=traces,proto3" json:"traces,omitempty"`
	Metrics *SearchMetrics         `protobuf:"bytes,2,opt,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *SearchResponse) Reset() {
	*x = SearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_tempopb_tempo_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResponse) ProtoMessage() {}

func (x *SearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_tempopb_tempo_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResponse.ProtoReflect.Descriptor instead.
func (*SearchResponse) Descriptor() ([]byte, []int) {
	return file_pkg_tempopb_tempo_proto_rawDescGZIP(), []int{5}
}

func (x *SearchResponse) GetTraces() []*TraceSearchMetadata {
	if x != nil {
		return x.Traces
	}
	return nil
}

func (x *SearchResponse) GetMetrics() *SearchMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type TraceSearchMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TraceID           string `protobuf:"bytes,1,opt,name=traceID,proto3" json:"traceID,omitempty"`
	RootServiceName   string `protobuf:"bytes,2,opt,name=rootServiceName,proto3" json:"rootServiceName,omitempty"`
	RootTraceName     string `protobuf:"bytes,3,opt,name=rootTraceName,proto3" json:"rootTraceName,omitempty"`
	StartTimeUnixNano uint64 `protobuf:"varint,4,opt,name=startTimeUnixNano,proto3" json:"startTimeUnixNano,omitempty"`
	DurationMs        uint32 `protobuf:"varint,5,opt,name=durationMs,proto3" json:"durationMs,omitempty"`
}

func (x *TraceSearchMetadata) Reset() {
	*x = TraceSearchMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_tempopb_tempo_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceSearchMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceSearchMetadata) ProtoMessage() {}

func (x *TraceSearchMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_tempopb_tempo_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceSearchMetadata.ProtoReflect.Descriptor instead.
func (*TraceSearchMetadata) Descriptor() ([]byte, []int) {
	return file_pkg_tempopb_tempo_proto_rawDescGZIP(), []int{6}
}

func (x *TraceSearchMetadata) GetTraceID() string {
	if x != nil {
		return x.TraceID
	}
	return ""
}

func (x *TraceSearchMetadata) GetRootServiceName() string {
	if x != nil {
		return x.RootServiceName
	}
	return ""
}

func (x *TraceSearchMetadata) GetRootTraceName() string {
	if x != nil {
		return x.RootTraceName
	}
	return ""
}

func (x *TraceSearchMetadata) GetStartTimeUnixNano() uint64 {
	if x != nil {
		return x.StartTimeUnixNano
	}
	return 0
}

func (x *TraceSearchMetadata) GetDurationMs() uint32 {
	if x != nil {
		return x.DurationMs
	}
	return 0
}

type SearchMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InspectedTraces uint32 `protobuf:"varint,1,opt,name=inspectedTraces,proto3" json:"inspectedTraces,omitempty"`
	InspectedBytes  uint64 `protobuf:"varint,2,opt,name=inspectedBytes,proto3" json:"inspectedBytes,omitempty"`
	InspectedBlocks uint32 `protobuf:"varint,3,opt,name=inspectedBlocks,proto3" json:"inspectedBlocks,omitempty"`
	SkippedBlocks   uint32 `protobuf:"varint,4,opt,name=skippedBlocks,proto3" json:"skippedBlocks,omitempty"`
	SkippedTraces   uint32 `protobuf:"varint,5,opt,name=skippedTraces,proto3" json:"skippedTraces,omitempty"`
	TotalBlockBytes uint64 `protobuf:"varint,6,opt,name=totalBlockBytes,proto3" json:"totalBlockBytes,omitempty"`
}

func (x *SearchMetrics) Reset() {
	*x = SearchMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_tempopb_tempo_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchMetrics) ProtoMessage() {}

func (x *SearchMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_tempopb_tempo_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchMetrics.ProtoReflect.Descriptor instead.
func (*SearchMetrics) Descriptor() ([]byte, []int) {
	return file_pkg_tempopb_tempo_proto_rawDescGZIP(), []int{7}
}

func (x *SearchMetrics) GetInspectedTraces() uint32 {
	if x != nil {
		return x.InspectedTraces
	}
	return 0
}

func (x *SearchMetrics) GetInspectedBytes() uint64 {
	if x != nil {
		return x.InspectedBytes
	}
	return 0
}

func (x *SearchMetrics) GetInspectedBlocks() uint32 {
	if x != nil {
		return x.InspectedBlocks
	}
	return 0
}

func (x *SearchMetrics) GetSkippedBlocks() uint32 {
	if x != nil {
		return x.SkippedBlocks
	}
	return 0
}

func (x *SearchMetrics) GetSkippedTraces() uint32 {
	if x != nil {
		return x.SkippedTraces
	}
	return 0
}

func (x *SearchMetrics) GetTotalBlockBytes() uint64 {
	if x != nil {
		return x.TotalBlockBytes
	}
	return 0
}

type SearchTagsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SearchTagsRequest) Reset() {
	*x = SearchTagsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_tempopb_tempo_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchTagsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchTagsRequest) ProtoMessage() {}

func (x *SearchTagsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_tempopb_tempo_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchTagsRequest.ProtoReflect.Descriptor instead.
func (*SearchTagsRequest) Descriptor() ([]byte, []int) {
	return file_pkg_tempopb_tempo_proto_rawDescGZIP(), []int{8}
}

type SearchTagsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagNames []string `protobuf:"bytes,1,rep,name=tagNames,proto3" json:"tagNames,omitempty"`
}

func (x *SearchTagsResponse) Reset() {
	*x = SearchTagsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_tempopb_tempo_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchTagsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchTagsResponse) ProtoMessage() {}

func (x *SearchTagsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_tempopb_tempo_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchTagsResponse.ProtoReflect.Descriptor instead.
func (*SearchTagsResponse) Descriptor() ([]byte, []int) {
	return file_pkg_tempopb_tempo_proto_rawDescGZIP(), []int{9}
}

func (x *SearchTagsResponse) GetTagNames() []string {
	if x != nil {
		return x.TagNames
	}
	return nil
}

type SearchTagValuesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagName string `protobuf:"bytes,1,opt,name=tagName,proto3" json:"tagName,omitempty"`
}

func (x *SearchTagValuesRequest) Reset() {
	*x = SearchTagValuesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_tempopb_tempo_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchTagValuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchTagValuesRequest) ProtoMessage() {}

func (x *SearchTagValuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_tempopb_tempo_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchTagValuesRequest.ProtoReflect.Descriptor instead.
func (*SearchTagValuesRequest) Descriptor() ([]byte, []int) {
	return file_pkg_tempopb_tempo_proto_rawDescGZIP(), []int{10}
}

func (x *SearchTagValuesRequest) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

type SearchTagValuesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagValues []string `protobuf:"bytes,1,rep,name=tagValues,proto3" json:"tagValues,omitempty"`
}

func (x *SearchTagValuesResponse) Reset() {
	*x = SearchTagValuesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_tempopb_tempo_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchTagValuesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchTagValuesResponse) ProtoMessage() {}

func (x *SearchTagValuesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_tempopb_tempo_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchTagValuesResponse.ProtoReflect.Descriptor instead.
func (*SearchTagValuesResponse) Descriptor() ([]byte, []int) {
	return file_pkg_tempopb_tempo_proto_rawDescGZIP(), []int{11}
}

func (x *SearchTagValuesResponse) GetTagValues() []string {
	if x != nil {
		return x.TagValues
	}
	return nil
}

type Trace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Batches []*v1.ResourceSpans `protobuf:"bytes,1,rep,name=batches,proto3" json:"batches,omitempty"`
}

func (x *Trace) Reset() {
	*x = Trace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_tempopb_tempo_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trace) ProtoMessage() {}

func (x *Trace) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_tempopb_tempo_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trace.ProtoReflect.Descriptor instead.
func (*Trace) Descriptor() ([]byte, []int) {
	return file_pkg_tempopb_tempo_proto_rawDescGZIP(), []int{12}
}

func (x *Trace) GetBatches() []*v1.ResourceSpans {
	if x != nil {
		return x.Batches
	}
	return nil
}

// Write
type PushResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PushResponse) Reset() {
	*x = PushResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_tempopb_tempo_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushResponse) ProtoMessage() {}

func (x *PushResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_tempopb_tempo_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushResponse.ProtoReflect.Descriptor instead.
func (*PushResponse) Descriptor() ([]byte, []int) {
	return file_pkg_tempopb_tempo_proto_rawDescGZIP(), []int{13}
}

// PushBytesRequest pushes slices of traces, ids and searchdata. Traces are encoded using the
//  current BatchDecoder in ./pkg/model
type PushBytesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pre-marshalled Traces. length must match ids
	Traces [][]byte `protobuf:"bytes,2,rep,name=traces,proto3" json:"traces,omitempty"`
	// trace ids. length must match traces
	Ids [][]byte `protobuf:"bytes,3,rep,name=ids,proto3" json:"ids,omitempty"`
	// search data, length must match traces
	SearchData [][]byte `protobuf:"bytes,4,rep,name=searchData,proto3" json:"searchData,omitempty"`
}

func (x *PushBytesRequest) Reset() {
	*x = PushBytesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_tempopb_tempo_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushBytesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushBytesRequest) ProtoMessage() {}

func (x *PushBytesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_tempopb_tempo_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushBytesRequest.ProtoReflect.Descriptor instead.
func (*PushBytesRequest) Descriptor() ([]byte, []int) {
	return file_pkg_tempopb_tempo_proto_rawDescGZIP(), []int{14}
}

func (x *PushBytesRequest) GetTraces() [][]byte {
	if x != nil {
		return x.Traces
	}
	return nil
}

func (x *PushBytesRequest) GetIds() [][]byte {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *PushBytesRequest) GetSearchData() [][]byte {
	if x != nil {
		return x.SearchData
	}
	return nil
}

type PushSpansRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// just send entire OTel spans for now
	Batches []*v1.ResourceSpans `protobuf:"bytes,1,rep,name=batches,proto3" json:"batches,omitempty"`
}

func (x *PushSpansRequest) Reset() {
	*x = PushSpansRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_tempopb_tempo_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushSpansRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushSpansRequest) ProtoMessage() {}

func (x *PushSpansRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_tempopb_tempo_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushSpansRequest.ProtoReflect.Descriptor instead.
func (*PushSpansRequest) Descriptor() ([]byte, []int) {
	return file_pkg_tempopb_tempo_proto_rawDescGZIP(), []int{15}
}

func (x *PushSpansRequest) GetBatches() []*v1.ResourceSpans {
	if x != nil {
		return x.Batches
	}
	return nil
}

type TraceBytes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pre-marshalled Traces
	Traces [][]byte `protobuf:"bytes,1,rep,name=traces,proto3" json:"traces,omitempty"`
}

func (x *TraceBytes) Reset() {
	*x = TraceBytes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_tempopb_tempo_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceBytes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceBytes) ProtoMessage() {}

func (x *TraceBytes) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_tempopb_tempo_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceBytes.ProtoReflect.Descriptor instead.
func (*TraceBytes) Descriptor() ([]byte, []int) {
	return file_pkg_tempopb_tempo_proto_rawDescGZIP(), []int{16}
}

func (x *TraceBytes) GetTraces() [][]byte {
	if x != nil {
		return x.Traces
	}
	return nil
}

var File_pkg_tempopb_tempo_proto protoreflect.FileDescriptor

var file_pkg_tempopb_tempo_proto_rawDesc = []byte{
	0x0a, 0x17, 0x70, 0x6b, 0x67, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x70, 0x62, 0x2f, 0x74, 0x65,
	0x6d, 0x70, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x74, 0x65, 0x6d, 0x70, 0x6f,
	0x70, 0x62, 0x1a, 0x14, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x70, 0x6b, 0x67, 0x2f, 0x74, 0x65,
	0x6d, 0x70, 0x6f, 0x70, 0x62, 0x2f, 0x76, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x78,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x86, 0x01, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x45,
	0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x45,
	0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65,
	0x22, 0x6e, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x63, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x70, 0x62, 0x2e, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74,
	0x65, 0x6d, 0x70, 0x6f, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x42, 0x79, 0x49, 0x44,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x22, 0x36, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x63, 0x65, 0x42, 0x79, 0x49, 0x44, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x9e, 0x02, 0x0a, 0x0d, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x04, 0x54, 0x61,
	0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f,
	0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x54, 0x61, 0x67, 0x73,
	0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x69, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x4d, 0x69, 0x6e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x61, 0x78, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x4d,
	0x61, 0x78, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x80, 0x03, 0x0a, 0x12, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x34, 0x0a, 0x09, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x70, 0x62, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x09, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x70, 0x61, 0x67, 0x65, 0x73, 0x54, 0x6f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x61, 0x67, 0x65, 0x73, 0x54, 0x6f, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x78, 0x0a, 0x0e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34,
	0x0a, 0x06, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x06, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x70, 0x62, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x07, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0xcd, 0x01, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x6f, 0x6f, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x72, 0x6f, 0x6f, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x6f, 0x6f, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x6f, 0x6f, 0x74, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x78, 0x4e, 0x61, 0x6e, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e,
	0x69, 0x78, 0x4e, 0x61, 0x6e, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x22, 0x81, 0x02, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x6b, 0x69,
	0x70, 0x70, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x6b,
	0x69, 0x70, 0x70, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73,
	0x12, 0x28, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x13, 0x0a, 0x11, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x30, 0x0a, 0x12, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x22, 0x32, 0x0a, 0x16, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x61, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61,
	0x67, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x37, 0x0a, 0x17, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54,
	0x61, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x61, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x48,
	0x0a, 0x05, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f,
	0x70, 0x62, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x3a, 0x04, 0xa8, 0xa6, 0x1f, 0x01, 0x22, 0x0e, 0x0a, 0x0c, 0x50, 0x75, 0x73, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5c, 0x0a, 0x10, 0x50, 0x75, 0x73, 0x68,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x22, 0x4d, 0x0a, 0x10, 0x50, 0x75, 0x73, 0x68, 0x53, 0x70,
	0x61, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x07, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65,
	0x6d, 0x70, 0x6f, 0x70, 0x62, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x52, 0x07, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x73, 0x22, 0x2a, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x63, 0x65, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x3a, 0x04, 0xa8, 0xa6, 0x1f,
	0x01, 0x32, 0x8c, 0x01, 0x0a, 0x06, 0x50, 0x75, 0x73, 0x68, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x09,
	0x50, 0x75, 0x73, 0x68, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x19, 0x2e, 0x74, 0x65, 0x6d, 0x70,
	0x6f, 0x70, 0x62, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x70, 0x62, 0x2e, 0x50,
	0x75, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a,
	0x0b, 0x50, 0x75, 0x73, 0x68, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x32, 0x12, 0x19, 0x2e, 0x74,
	0x65, 0x6d, 0x70, 0x6f, 0x70, 0x62, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x70,
	0x62, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x32, 0x53, 0x0a, 0x10, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x3f, 0x0a, 0x09, 0x50, 0x75, 0x73, 0x68, 0x53, 0x70, 0x61, 0x6e,
	0x73, 0x12, 0x19, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x70, 0x62, 0x2e, 0x50, 0x75, 0x73, 0x68,
	0x53, 0x70, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x74,
	0x65, 0x6d, 0x70, 0x6f, 0x70, 0x62, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xfe, 0x02, 0x0a, 0x07, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65,
	0x72, 0x12, 0x48, 0x0a, 0x0d, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x63, 0x65, 0x42, 0x79,
	0x49, 0x44, 0x12, 0x19, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e,
	0x74, 0x65, 0x6d, 0x70, 0x6f, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x42, 0x79, 0x49,
	0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0c, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x2e, 0x74, 0x65,
	0x6d, 0x70, 0x6f, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x70, 0x62, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45,
	0x0a, 0x0b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1b, 0x2e,
	0x74, 0x65, 0x6d, 0x70, 0x6f, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x74, 0x65, 0x6d,
	0x70, 0x6f, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0a, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54,
	0x61, 0x67, 0x73, 0x12, 0x1a, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x70, 0x62, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1b, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x56,
	0x0a, 0x0f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x61, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x12, 0x1f, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x54, 0x61, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x20, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x54, 0x61, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x0d, 0x5a, 0x0b, 0x70, 0x6b, 0x67, 0x2f, 0x74, 0x65,
	0x6d, 0x70, 0x6f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_tempopb_tempo_proto_rawDescOnce sync.Once
	file_pkg_tempopb_tempo_proto_rawDescData = file_pkg_tempopb_tempo_proto_rawDesc
)

func file_pkg_tempopb_tempo_proto_rawDescGZIP() []byte {
	file_pkg_tempopb_tempo_proto_rawDescOnce.Do(func() {
		file_pkg_tempopb_tempo_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_tempopb_tempo_proto_rawDescData)
	})
	return file_pkg_tempopb_tempo_proto_rawDescData
}

var file_pkg_tempopb_tempo_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_pkg_tempopb_tempo_proto_goTypes = []interface{}{
	(*TraceByIDRequest)(nil),        // 0: tempopb.TraceByIDRequest
	(*TraceByIDResponse)(nil),       // 1: tempopb.TraceByIDResponse
	(*TraceByIDMetrics)(nil),        // 2: tempopb.TraceByIDMetrics
	(*SearchRequest)(nil),           // 3: tempopb.SearchRequest
	(*SearchBlockRequest)(nil),      // 4: tempopb.SearchBlockRequest
	(*SearchResponse)(nil),          // 5: tempopb.SearchResponse
	(*TraceSearchMetadata)(nil),     // 6: tempopb.TraceSearchMetadata
	(*SearchMetrics)(nil),           // 7: tempopb.SearchMetrics
	(*SearchTagsRequest)(nil),       // 8: tempopb.SearchTagsRequest
	(*SearchTagsResponse)(nil),      // 9: tempopb.SearchTagsResponse
	(*SearchTagValuesRequest)(nil),  // 10: tempopb.SearchTagValuesRequest
	(*SearchTagValuesResponse)(nil), // 11: tempopb.SearchTagValuesResponse
	(*Trace)(nil),                   // 12: tempopb.Trace
	(*PushResponse)(nil),            // 13: tempopb.PushResponse
	(*PushBytesRequest)(nil),        // 14: tempopb.PushBytesRequest
	(*PushSpansRequest)(nil),        // 15: tempopb.PushSpansRequest
	(*TraceBytes)(nil),              // 16: tempopb.TraceBytes
	nil,                             // 17: tempopb.SearchRequest.TagsEntry
	(*v1.ResourceSpans)(nil),        // 18: tempopb.trace.v1.ResourceSpans
}
var file_pkg_tempopb_tempo_proto_depIdxs = []int32{
	12, // 0: tempopb.TraceByIDResponse.trace:type_name -> tempopb.Trace
	2,  // 1: tempopb.TraceByIDResponse.metrics:type_name -> tempopb.TraceByIDMetrics
	17, // 2: tempopb.SearchRequest.Tags:type_name -> tempopb.SearchRequest.TagsEntry
	3,  // 3: tempopb.SearchBlockRequest.searchReq:type_name -> tempopb.SearchRequest
	6,  // 4: tempopb.SearchResponse.traces:type_name -> tempopb.TraceSearchMetadata
	7,  // 5: tempopb.SearchResponse.metrics:type_name -> tempopb.SearchMetrics
	18, // 6: tempopb.Trace.batches:type_name -> tempopb.trace.v1.ResourceSpans
	18, // 7: tempopb.PushSpansRequest.batches:type_name -> tempopb.trace.v1.ResourceSpans
	14, // 8: tempopb.Pusher.PushBytes:input_type -> tempopb.PushBytesRequest
	14, // 9: tempopb.Pusher.PushBytesV2:input_type -> tempopb.PushBytesRequest
	15, // 10: tempopb.MetricsGenerator.PushSpans:input_type -> tempopb.PushSpansRequest
	0,  // 11: tempopb.Querier.FindTraceByID:input_type -> tempopb.TraceByIDRequest
	3,  // 12: tempopb.Querier.SearchRecent:input_type -> tempopb.SearchRequest
	4,  // 13: tempopb.Querier.SearchBlock:input_type -> tempopb.SearchBlockRequest
	8,  // 14: tempopb.Querier.SearchTags:input_type -> tempopb.SearchTagsRequest
	10, // 15: tempopb.Querier.SearchTagValues:input_type -> tempopb.SearchTagValuesRequest
	13, // 16: tempopb.Pusher.PushBytes:output_type -> tempopb.PushResponse
	13, // 17: tempopb.Pusher.PushBytesV2:output_type -> tempopb.PushResponse
	13, // 18: tempopb.MetricsGenerator.PushSpans:output_type -> tempopb.PushResponse
	1,  // 19: tempopb.Querier.FindTraceByID:output_type -> tempopb.TraceByIDResponse
	5,  // 20: tempopb.Querier.SearchRecent:output_type -> tempopb.SearchResponse
	5,  // 21: tempopb.Querier.SearchBlock:output_type -> tempopb.SearchResponse
	9,  // 22: tempopb.Querier.SearchTags:output_type -> tempopb.SearchTagsResponse
	11, // 23: tempopb.Querier.SearchTagValues:output_type -> tempopb.SearchTagValuesResponse
	16, // [16:24] is the sub-list for method output_type
	8,  // [8:16] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_pkg_tempopb_tempo_proto_init() }
func file_pkg_tempopb_tempo_proto_init() {
	if File_pkg_tempopb_tempo_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_tempopb_tempo_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_tempopb_tempo_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_tempopb_tempo_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceByIDMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_tempopb_tempo_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_tempopb_tempo_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_tempopb_tempo_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_tempopb_tempo_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceSearchMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_tempopb_tempo_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_tempopb_tempo_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchTagsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_tempopb_tempo_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchTagsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_tempopb_tempo_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchTagValuesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_tempopb_tempo_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchTagValuesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_tempopb_tempo_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_tempopb_tempo_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_tempopb_tempo_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushBytesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_tempopb_tempo_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushSpansRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_tempopb_tempo_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceBytes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_tempopb_tempo_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_pkg_tempopb_tempo_proto_goTypes,
		DependencyIndexes: file_pkg_tempopb_tempo_proto_depIdxs,
		MessageInfos:      file_pkg_tempopb_tempo_proto_msgTypes,
	}.Build()
	File_pkg_tempopb_tempo_proto = out.File
	file_pkg_tempopb_tempo_proto_rawDesc = nil
	file_pkg_tempopb_tempo_proto_goTypes = nil
	file_pkg_tempopb_tempo_proto_depIdxs = nil
}
